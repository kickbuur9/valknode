apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  labels:
    app: kibana
data:
  kibana.yml: |
    # Kibana server settings
    # Binds Kibana to all network interfaces within the container.
    server.host: "0.0.0.0"
    # The port Kibana listens on.
    server.port: 5601

    server.publicBaseUrl: "https://kibana.kickb.dev:5601"

    # Kibana UI SSL settings
    # Enables HTTPS for the Kibana UI.
    server.ssl.enabled: true
    # Path to Kibana's SSL certificate (your domain.cert.pem).
    server.ssl.certificate: /usr/share/kibana/config/certs/domain.cert.pem
    # Path to Kibana's SSL private key (your private.key.pem).
    server.ssl.key: /usr/share/kibana/config/certs/private.key.pem

    # Elasticsearch connection settings
    # The list of Elasticsearch hosts Kibana should connect to.
    # 'elasticsearch' is the Kubernetes service name for your Elasticsearch deployment.
    elasticsearch.hosts: ["https://elasticsearch:9200"]
    # Path to the certificate that Kibana should use to trust Elasticsearch.
    # Since you don't have a separate ca.crt, we use the same domain.cert.pem
    # that Elasticsearch is serving, assuming it contains the necessary trust chain.
    elasticsearch.ssl.certificateAuthorities: ["/usr/share/kibana/config/certs/domain.cert.pem"]
    # Sets the SSL verification mode to 'full', meaning Kibana will verify
    # both the certificate chain and the hostname.
    elasticsearch.ssl.verificationMode: none #certificate

    # Authentication via service account token
    # Kibana uses this token to authenticate with Elasticsearch.
    elasticsearch.serviceAccountToken: ${ELASTICSEARCH_SERVICEACCOUNTTOKEN}

    # X-Pack encryption keys for saved objects and reporting.
    # These should ideally be generated and managed securely (e.g., via Kubernetes secrets)
    # in a production environment.
    xpack.encryptedSavedObjects.encryptionKey: "bca7e38a7c9f41eaa44e134bb326ebf1"
    xpack.reporting.encryptionKey: "2bf9f33c94cb46d7ae8fc0f7ef3b2a55"
